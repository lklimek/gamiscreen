#[cfg(feature = "ts")]
use std::{fs, io::Write, path::Path};

#[cfg(feature = "ts")]
use ts_rs::TS;

#[cfg(feature = "ts")]
use super::{
    AuthReq, AuthResp, ChildDto, ClientRegisterReq, ClientRegisterResp, ConfigResp, HeartbeatReq,
    HeartbeatResp, NotificationItemDto, NotificationsCountDto, PushSubscribeReq, PushSubscribeResp,
    PushUnsubscribeReq, RemainingDto, RewardHistoryItemDto, RewardReq, RewardResp, SubmitTaskReq,
    TaskDto, TaskWithStatusDto, UpdateArtifactDto, UpdateItemDto, UpdateManifestDto,
    UsageBucketDto, UsageSeriesDto, VersionInfoDto,
};
#[cfg(feature = "ts")]
use crate::{auth::Role, jwt::JwtClaims};

#[cfg(feature = "ts")]
pub fn export_types(path: impl AsRef<Path>) -> std::io::Result<()> {
    let path = path.as_ref();
    if let Some(parent) = path.parent() {
        fs::create_dir_all(parent)?;
    }
    let mut file = fs::File::create(path)?;

    writeln!(
        file,
        "// This file is @generated by gamiscreen-server/build.rs\n// Do not edit manually.\n"
    )?;

    let mut write_decl = |decl: String| -> std::io::Result<()> {
        let trimmed = decl.trim();
        if trimmed.is_empty() {
            return Ok(());
        }
        let exported = if let Some(rest) = trimmed.strip_prefix("interface ") {
            format!("export interface {}", rest)
        } else if let Some(rest) = trimmed.strip_prefix("type ") {
            format!("export type {}", rest)
        } else {
            trimmed.to_string()
        };
        writeln!(file, "{}\n", exported)?;
        Ok(())
    };

    write_decl(AuthReq::decl())?;
    write_decl(AuthResp::decl())?;
    write_decl(ChildDto::decl())?;
    write_decl(TaskDto::decl())?;
    write_decl(TaskWithStatusDto::decl())?;
    write_decl(RemainingDto::decl())?;
    write_decl(RewardReq::decl())?;
    write_decl(RewardResp::decl())?;
    write_decl(HeartbeatReq::decl())?;
    write_decl(HeartbeatResp::decl())?;
    write_decl(ConfigResp::decl())?;
    write_decl(PushSubscribeReq::decl())?;
    write_decl(PushSubscribeResp::decl())?;
    write_decl(PushUnsubscribeReq::decl())?;
    write_decl(ClientRegisterReq::decl())?;
    write_decl(ClientRegisterResp::decl())?;
    write_decl(RewardHistoryItemDto::decl())?;
    write_decl(UsageBucketDto::decl())?;
    write_decl(UsageSeriesDto::decl())?;
    write_decl(SubmitTaskReq::decl())?;
    write_decl(NotificationsCountDto::decl())?;
    write_decl(NotificationItemDto::decl())?;
    write_decl(UpdateManifestDto::decl())?;
    write_decl(UpdateItemDto::decl())?;
    write_decl(UpdateArtifactDto::decl())?;
    write_decl(VersionInfoDto::decl())?;
    write_decl(Role::decl())?;
    write_decl(JwtClaims::decl())?;

    Ok(())
}
